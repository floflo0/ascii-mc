#pragma once

#include <assert.h>
#include <stdbool.h>

#include "color.h"
#include "player_game_mode.h"
#include "utils.h"

#define CHARACTER_RATIO (8.0f / 16.0f)

#define CHUNK_SIZE 16     // m
#define CHUNK_HEIGHT 256  // m

#define CHUNK_GENERATION_MIN_TERRAIN_HEIGHT 60   // m
#define CHUNK_GENERATION_MAX_TERRAIN_HEIGHT 170  // m
#define CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_FREQUENCY 0.005f
#define CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_DEPTH 5
#define CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_POW 4.0f
#define CHUNK_GENERATION_DESERT_NOISE_FREQUENCY 0.0025f
#define CHUNK_GENERATION_DESERT_NOISE_DEPTH 1
#define CHUNK_GENERATION_DESERT_NOISE_THRESHOLD 0.55f
#define CHUNK_GENERATION_SURFACE_LAYER_MIN_THICKNESS 1  // m
#define CHUNK_GENERATION_SURFACE_LAYER_MAX_THICKNESS 5  // m
#define CHUNK_GENERATION_SURFACE_LAYER_NOISE_FREQUENCY 0.1f
#define CHUNK_GENERATION_SURFACE_LAYER_NOISE_DEPTH 1
#define CHUNK_GENERATION_MIN_SNOW_HEIGHT 100          // m
#define CHUNK_GENERATION_MIN_SNOW_HEIGHT_VARIATION 5  // m
#define CHUNK_GENERATION_MIN_SNOW_HEIGHT_NOISE_FREQUENCY 0.1f
#define CHUNK_GENERATION_MIN_SNOW_HEIGHT_NOISE_DEPTH 1

#define WORLD_SIZE 6250          // chunks
#define WORLD_LOAD_DISTANCE 7    // chunks
#define WORLD_RENDER_DISTANCE 6  // chunks
#define WORLD_RENDER_THREADS_NUMBER 18
// #define WORLD_RENDER_SCHEDULER_DYNAMIC

#define CAMERA_FOV RAD(60.0f /* deg */)
#define CAMERA_Z_NEAR 0.01f
#define CAMERA_Z_FAR 300.0f
#define CAMERA_SENSITIVITY 2.0f
#define CAMERA_KEYBOARD_SENSITIVITY RAD(5.0f)

#define PLAYER_START_X 0
#define PLAYER_START_Z 0
#define PLAYER_DEFAULT_YAW 0.0f
#define PLAYER_DEFAULT_PITCH 0.0f
#define PLAYER_MAX_HEALTH 20
#define PLAYER_DEFAULT_GAME_MODE PLAYER_GAME_MODE_CREATIVE
#define PLAYER_WIDTH 0.6f                     // m
#define PLAYER_HEIGHT 1.80f                   // m
#define PLAYER_CAMERA_HEIGHT 1.75f            // m
#define PLAYER_MOVEMENT_SPEED 6.0f            // m/s
#define PLAYER_KEYBOARD_MOVEMENT_SPEED 0.18f  // m
#define PLAYER_JUMP_SPEED 9.4f                // m/s
#define PLAYER_SAFE_FALL_HEIGHT 3             // m/s
#define PLAYER_CROSSHAIR_COLOR COLOR_WHITE
#define PLAYER_RANGE 5.0f  // m
#define PLAYER_GROUNDED_EPSILON 0.000001f
#define PLAYER_COYOTE_TIME_MICROSECONDS 150000
#define PLAYER_0_COLOR COLOR_BLUE
#define PLAYER_1_COLOR COLOR_MAGENTA
#define PLAYER_2_COLOR COLOR_CYAN
#define PLAYER_3_COLOR COLOR_RED

#define GAME_PLAYER_SCREENS_BORDER_COLOR COLOR_WHITE
#define GAME_COMMAND_COLOR COLOR_WHITE
// #define GAME_MAX_FRAMERATE 60

#define MESH_OUTLINE_COLOR COLOR_DARK_GREY
#define MESH_OUTLINE_Z_CORRECTION 0.075f
#define MESH_OUTLINE_MAX_DISTANCE PLAYER_RANGE
#define MESH_FAR_OUTLINE_MAX_DISTANCE 15.0f  // m
#define MESH_SHADOW_DISTANCE (CHUNK_SIZE * WORLD_RENDER_DISTANCE - 5.0f)
#define MESH_SHADOW_COLOR COLOR_DARK_GREY

#define CONTROLLER_AXIS_ROUND 0.01f

#define G_FORCE 32.0f  // m/s^2

#define WINDOW_CLEAR_COLOR COLOR_WHITE
#define WINDOW_CLEAR_CHAR ' '

// Debug

#ifdef PROD
#define GAME_DEFAULT_SHOW_DEBUG_INFO false
#else
#define GAME_DEFAULT_SHOW_DEBUG_INFO true
#endif

// Enable controlling the player with the keyboard.
#ifndef PROD
#define GAME_KEYBOARD_CONTROL
#endif

// #define RENDER_WIREFRAME

// Config validation

#define STATIC_ASSERT_IS_INTEGER(value) \
    static_assert((value) == (int)(value), #value " must be an integer")

#define STATIC_ASSERT_IS_CHAR(value) \
    STATIC_ASSERT_IS_INTEGER(value); \
    static_assert(-127 <= value && value <= 128)

#define STATIC_ASSERT_IS_BOOLEAN(value)                   \
    static_assert(value == true || value == false, #value \
                  " must be a "                           \
                  "boolean")

#define STATIC_ASSERT_IS_COLOR(value)                                        \
    static_assert(value == COLOR_DARK_RED || value == COLOR_DARK_GREEN ||    \
                  value == COLOR_DARK_YELLOW || value == COLOR_DARK_BLUE ||  \
                  value == COLOR_DARK_MAGENTA || value == COLOR_DARK_CYAN || \
                  value == COLOR_LIGHT_GREY || value == COLOR_DARK_GREY ||   \
                  value == COLOR_RED || value == COLOR_GREEN ||              \
                  value == COLOR_YELLOW || value == COLOR_BLUE ||            \
                  value == COLOR_MAGENTA || value == COLOR_CYAN ||           \
                  value == COLOR_WHITE)

static_assert(0.0f < CHARACTER_RATIO);

STATIC_ASSERT_IS_INTEGER(CHUNK_SIZE);
static_assert(0 < CHUNK_SIZE && CHUNK_SIZE <= 256,
              "CHUNK_SIZE must be between 0 and 256");
STATIC_ASSERT_IS_INTEGER(CHUNK_HEIGHT);
static_assert(0 < CHUNK_HEIGHT && CHUNK_HEIGHT <= 256,
              "CHUNK_HEIGHT mush be between 0 and 256");

STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_MIN_TERRAIN_HEIGHT);
static_assert(0 <= CHUNK_GENERATION_MIN_TERRAIN_HEIGHT &&
              CHUNK_GENERATION_MIN_TERRAIN_HEIGHT < CHUNK_HEIGHT);

STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_MAX_TERRAIN_HEIGHT);
static_assert(CHUNK_GENERATION_MIN_TERRAIN_HEIGHT <=
                  CHUNK_GENERATION_MAX_TERRAIN_HEIGHT &&
              CHUNK_GENERATION_MAX_TERRAIN_HEIGHT <= CHUNK_HEIGHT);

static_assert(0.0f < CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_FREQUENCY);
STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_DEPTH);
static_assert(0 < CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_DEPTH);
static_assert(0.0f < CHUNK_GENERATION_TERRAIN_HEIGHT_NOISE_POW);

static_assert(0.0f < CHUNK_GENERATION_DESERT_NOISE_FREQUENCY);
STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_DESERT_NOISE_DEPTH);
static_assert(0 < CHUNK_GENERATION_DESERT_NOISE_DEPTH);
static_assert(0.0f <= CHUNK_GENERATION_DESERT_NOISE_THRESHOLD &&
              CHUNK_GENERATION_DESERT_NOISE_THRESHOLD <= 1.0f);

STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_SURFACE_LAYER_MIN_THICKNESS);
static_assert(0 <= CHUNK_GENERATION_SURFACE_LAYER_MIN_THICKNESS &&
              CHUNK_GENERATION_SURFACE_LAYER_MIN_THICKNESS < CHUNK_HEIGHT);
STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_SURFACE_LAYER_MAX_THICKNESS);
static_assert(CHUNK_GENERATION_SURFACE_LAYER_MIN_THICKNESS <=
              CHUNK_GENERATION_SURFACE_LAYER_MAX_THICKNESS);
static_assert(CHUNK_GENERATION_SURFACE_LAYER_MAX_THICKNESS < CHUNK_HEIGHT);

static_assert(0.0f < CHUNK_GENERATION_SURFACE_LAYER_NOISE_FREQUENCY);
STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_SURFACE_LAYER_NOISE_DEPTH);
static_assert(0 < CHUNK_GENERATION_SURFACE_LAYER_NOISE_DEPTH);

STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_MIN_SNOW_HEIGHT);
static_assert(0 <= CHUNK_GENERATION_MIN_SNOW_HEIGHT &&
              CHUNK_GENERATION_MIN_SNOW_HEIGHT < CHUNK_HEIGHT);
STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_MIN_SNOW_HEIGHT_VARIATION);
static_assert(0 <= CHUNK_GENERATION_MIN_SNOW_HEIGHT_VARIATION);
static_assert(0.0f < CHUNK_GENERATION_MIN_SNOW_HEIGHT_NOISE_FREQUENCY);
STATIC_ASSERT_IS_INTEGER(CHUNK_GENERATION_MIN_SNOW_HEIGHT_NOISE_DEPTH);
static_assert(0 < CHUNK_GENERATION_MIN_SNOW_HEIGHT_NOISE_DEPTH);

STATIC_ASSERT_IS_INTEGER(WORLD_SIZE);
static_assert(0 < WORLD_SIZE);
STATIC_ASSERT_IS_INTEGER(WORLD_LOAD_DISTANCE);
STATIC_ASSERT_IS_INTEGER(WORLD_RENDER_DISTANCE);
static_assert(WORLD_LOAD_DISTANCE * 2 + 1 <= WORLD_SIZE);
static_assert(WORLD_LOAD_DISTANCE >= WORLD_RENDER_DISTANCE + 1);
static_assert(0 < WORLD_RENDER_DISTANCE);
STATIC_ASSERT_IS_INTEGER(WORLD_RENDER_THREADS_NUMBER);
static_assert(0 < WORLD_RENDER_THREADS_NUMBER);

static_assert(0 < CAMERA_FOV && CAMERA_FOV < RAD(180.0f /* deg */));
static_assert(0.0f < CAMERA_Z_NEAR);
static_assert(CAMERA_Z_NEAR < CAMERA_Z_FAR);
static_assert(0.0f != CAMERA_SENSITIVITY);
static_assert(0.0f < CAMERA_KEYBOARD_SENSITIVITY);

STATIC_ASSERT_IS_INTEGER(PLAYER_START_X);
STATIC_ASSERT_IS_INTEGER(PLAYER_START_Z);
static_assert(RAD(-360.0f /* deg */) < PLAYER_DEFAULT_YAW &&
              PLAYER_DEFAULT_YAW < RAD(360.0f /* deg */));
static_assert(RAD(-90.0f /* deg */) <= PLAYER_DEFAULT_PITCH &&
              PLAYER_DEFAULT_PITCH <= RAD(90.0f /* deg */));
STATIC_ASSERT_IS_INTEGER(PLAYER_MAX_HEALTH);
static_assert(0 < PLAYER_MAX_HEALTH && PLAYER_MAX_HEALTH < UINT8_MAX);
static_assert(PLAYER_DEFAULT_GAME_MODE == PLAYER_GAME_MODE_SURVIVAL ||
              PLAYER_DEFAULT_GAME_MODE == PLAYER_GAME_MODE_CREATIVE ||
              PLAYER_DEFAULT_GAME_MODE == PLAYER_GAME_MODE_SPECTATOR);
static_assert(0.0f < PLAYER_WIDTH && PLAYER_WIDTH < 1.0f);
static_assert(0.0f < PLAYER_HEIGHT && PLAYER_HEIGHT < 2.0f);
static_assert(0.0f < PLAYER_CAMERA_HEIGHT &&
              PLAYER_CAMERA_HEIGHT < PLAYER_HEIGHT);
static_assert(0.0f < PLAYER_MOVEMENT_SPEED);
static_assert(0.0f < PLAYER_KEYBOARD_MOVEMENT_SPEED);
static_assert(0.0f < PLAYER_JUMP_SPEED);
STATIC_ASSERT_IS_INTEGER(PLAYER_SAFE_FALL_HEIGHT);
static_assert(0 <= PLAYER_SAFE_FALL_HEIGHT);
STATIC_ASSERT_IS_COLOR(PLAYER_CROSSHAIR_COLOR);
static_assert(0.0f < PLAYER_RANGE);
static_assert(0.0f < PLAYER_GROUNDED_EPSILON);
STATIC_ASSERT_IS_INTEGER(PLAYER_COYOTE_TIME_MICROSECONDS);
static_assert(0 < PLAYER_COYOTE_TIME_MICROSECONDS);
STATIC_ASSERT_IS_COLOR(PLAYER_0_COLOR);
STATIC_ASSERT_IS_COLOR(PLAYER_1_COLOR);
STATIC_ASSERT_IS_COLOR(PLAYER_2_COLOR);
STATIC_ASSERT_IS_COLOR(PLAYER_3_COLOR);

STATIC_ASSERT_IS_COLOR(GAME_PLAYER_SCREENS_BORDER_COLOR);
STATIC_ASSERT_IS_COLOR(GAME_COMMAND_COLOR);
#ifdef GAME_MAX_FRAMERATE
STATIC_ASSERT_IS_INTEGER(GAME_MAX_FRAMERATE);
static_assert(0 < GAME_MAX_FRAMERATE);
#endif

STATIC_ASSERT_IS_COLOR(MESH_OUTLINE_COLOR);
static_assert(0.0f <= MESH_OUTLINE_Z_CORRECTION);
static_assert(0.0f <= MESH_OUTLINE_MAX_DISTANCE);
static_assert(MESH_OUTLINE_MAX_DISTANCE <= MESH_FAR_OUTLINE_MAX_DISTANCE);
static_assert(0.0f < MESH_SHADOW_DISTANCE);
STATIC_ASSERT_IS_COLOR(MESH_SHADOW_COLOR);

static_assert(0.0f <= G_FORCE);

STATIC_ASSERT_IS_COLOR(WINDOW_CLEAR_COLOR);
STATIC_ASSERT_IS_CHAR(WINDOW_CLEAR_CHAR);

STATIC_ASSERT_IS_BOOLEAN(GAME_DEFAULT_SHOW_DEBUG_INFO);
